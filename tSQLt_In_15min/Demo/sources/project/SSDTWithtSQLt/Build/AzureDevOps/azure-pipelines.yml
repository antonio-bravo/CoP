# SSDT Building and testing pipeline
#
# The project is based on the SSDT-With-tSQLt-Template from https://github.com/sanderstad/SSDT-With-tSQLt-Template
#
# The container image used is build from
# - SQL Server 2017 CU16 image
# - SQL Server 2019 GA image

variables:
  configuration: release
  sqlinstance: localhost
  database: SSDTWithtSQLt
  artifactname: Database

trigger:
- development
- master

stages:
- stage: Build

  jobs:
    - job: 'Solution'

      pool:
        vmImage: vs2017-win2016

      steps:
      - task: VSBuild@1
        displayName: 'Build solution'
        inputs:
          solution: '**\*.sln'
          configuration: $(configuration)

      - task: CopyFiles@2
        displayName: "Copy files to artifact directory"
        inputs:
          Contents: |
            **\$(database)-Tests\bin\$(configuration)\*.*
            **\*.publish.xml
          TargetFolder: '$(Build.ArtifactStagingDirectory)'
          FlattenFolders: true
          OverWrite: true

      - task: PublishBuildArtifacts@1
        displayName: 'Publish artifact'
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: $(artifactname)
          publishLocation: 'Container'
- stage: Test

  jobs:
    - job: 'Linux2017'
      displayName: 'SQL Server 2017'
      variables:
        variables:
        dockerimage: 'mcr.microsoft.com/mssql/server:2017-latest'
        dockerpublishport: 1433
        dockername: sql1
        dockersqlpw: 'MyP@ssw0rd12345'
        dacpacpath: /var/opt/cicd
        testresultpath: $(Build.Repository.LocalPath)/build/sql2017
        dacpacfile: $(dacpacpath)/$(database)-Tests.dacpac
        publishfile: $(dacpacpath)/$(database)-Tests.publish.xml

      pool:
        vmImage: ubuntu-18.04

      steps:
      - task: PowerShell@2
        displayName: 'Prerequisites'
        inputs:
          filePath: '$(Build.Repository.LocalPath)/Build/AzureDevOps/azure-prerequisites.ps1'

      - task: DownloadBuildArtifacts@0
        displayName: 'Dowload Artifacts'
        inputs:
          buildType: 'current'
          downloadType: 'specific'
          downloadPath: '$(System.ArtifactsDirectory)'
      - task: Bash@3
        displayName: 'Install sqlpackage'
        inputs:
          targetType: 'inline'
          script: |
            echo 'Creating sqlpackage dir'
            sudo mkdir $(Build.Repository.LocalPath)/sqlpackage

            # Install sqlpackage
            echo 'Downloading sqlpackage'
            sudo wget -q -O $(Build.Repository.LocalPath)/sqlpackage/sqlpackage.zip https://go.microsoft.com/fwlink/?linkid=2108814

            echo 'Extracting sqlpackage.zip'
            sudo unzip -qq $(Build.Repository.LocalPath)/sqlpackage/sqlpackage.zip -d /$(Build.Repository.LocalPath)/sqlpackage

            echo 'Changing sqlpackage permissions'
            sudo chmod +x $(Build.Repository.LocalPath)/sqlpackage/sqlpackage

      - task: Bash@3
        displayName: 'Start SQL Server Container'
        inputs:
          targetType: 'inline'
          script: |
            docker run --name $(dockername) \
              -e "ACCEPT_EULA=Y" \
              -e "SA_PASSWORD=$(dockersqlpw)" \
              -p $(dockerpublishport):1433 \
              --volume $(System.ArtifactsDirectory)/$(artifactname):/var/opt/cicd \
              --volume $(Build.Repository.LocalPath)/sqlpackage:/var/opt/sqlpackage \
              -d $(dockerimage)

            echo "Sleeping to give container a chance to start up completely"
            sleep 10s

      - task: Bash@3
        displayName: 'Publish DACPAC'
        inputs:
          targetType: 'inline'
          script: |
            echo 'Get files in directory'
            sudo docker exec $(dockername) bash -c 'ls -la $(dacpacpath)'

            sudo docker exec $(dockername) bash -c '/var/opt/sqlpackage/sqlpackage /a:Publish /tsn:localhost /tdn:$(database) /tu:sa /tp:"$(dockersqlpw)" /sf:$(dacpacfile) /pr:$(publishfile) /p:IncludeCompositeObjects=true'

      - task: PowerShell@2
        displayName: 'Run Tests'
        inputs:
          filePath: '$(Build.Repository.LocalPath)/Build/AzureDevOps/azure-validate.ps1'
          arguments: '-SqlInstance "$(sqlinstance)" -SqlPassword "$(dockersqlpw)" -Database $(database) -TestResultPath $(testresultpath) -EnableException'

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/TEST-*.xml'
          failTaskOnFailedTests: true
          testRunTitle: 'SQL Server 2017'

    - job: 'Linux2019'
      displayName: 'SQL Server 2019'
      variables:
        variables:
        dockerimage: 'mcr.microsoft.com/mssql/server:2019-GA-ubuntu-16.04'
        dockerpublishport: 1433
        dockername: sql1
        dockersqlpw: 'MyP@ssw0rd12345'
        dacpacpath: /var/opt/cicd
        testresultpath: $(Build.Repository.LocalPath)/build/sql2019
        dacpacfile: $(dacpacpath)/$(database)-Tests.dacpac
        publishfile: $(dacpacpath)/$(database)-Tests.publish.xml

      pool:
        vmImage: ubuntu-18.04

      steps:
      - task: PowerShell@2
        displayName: 'Prerequisites'
        inputs:
          filePath: '$(Build.Repository.LocalPath)/Build/AzureDevOps/azure-prerequisites.ps1'

      - task: DownloadBuildArtifacts@0
        displayName: 'Dowload Artifacts'
        inputs:
          buildType: 'current'
          downloadType: 'specific'
          downloadPath: '$(System.ArtifactsDirectory)'
      - task: Bash@3
        displayName: 'Install sqlpackage'
        inputs:
          targetType: 'inline'
          script: |
            echo 'Creating sqlpackage dir'
            sudo mkdir $(Build.Repository.LocalPath)/sqlpackage

            # Install sqlpackage
            echo 'Downloading sqlpackage'
            sudo wget -q -O $(Build.Repository.LocalPath)/sqlpackage/sqlpackage.zip https://go.microsoft.com/fwlink/?linkid=2108814

            echo 'Extracting sqlpackage.zip'
            sudo unzip -qq $(Build.Repository.LocalPath)/sqlpackage/sqlpackage.zip -d /$(Build.Repository.LocalPath)/sqlpackage

            echo 'Changing sqlpackage permissions'
            sudo chmod +x $(Build.Repository.LocalPath)/sqlpackage/sqlpackage

      - task: Bash@3
        displayName: 'Start SQL Server Container'
        inputs:
          targetType: 'inline'
          script: |
            docker run --name $(dockername) \
              -e "ACCEPT_EULA=Y" \
              -e "SA_PASSWORD=$(dockersqlpw)" \
              -p $(dockerpublishport):1433 \
              --volume $(System.ArtifactsDirectory)/$(artifactname):/var/opt/cicd \
              --volume $(Build.Repository.LocalPath)/sqlpackage:/var/opt/sqlpackage \
              -d $(dockerimage)

            echo "Sleeping to give container a chance to start up completely"
            sleep 10s

      - task: Bash@3
        displayName: 'Publish DACPAC'
        inputs:
          targetType: 'inline'
          script: |
            echo 'Get files in directory'
            docker exec $(dockername) bash -c 'ls -la $(dacpacpath)'

            docker exec $(dockername) bash -c '/var/opt/sqlpackage/sqlpackage /a:Publish /tsn:localhost /tdn:$(database) /tu:sa /tp:"$(dockersqlpw)" /sf:$(dacpacfile) /pr:$(publishfile) /p:IncludeCompositeObjects=true'

      - task: PowerShell@2
        displayName: 'Run Tests'
        inputs:
          filePath: '$(Build.Repository.LocalPath)/Build/AzureDevOps/azure-validate.ps1'
          arguments: '-SqlInstance "$(sqlinstance)" -SqlPassword "$(dockersqlpw)" -Database $(database) -TestResultPath $(testresultpath) -EnableException'

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/TEST-*.xml'
          failTaskOnFailedTests: true
          testRunTitle: 'SQL Server 2019'





